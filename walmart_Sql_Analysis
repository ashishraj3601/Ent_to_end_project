# üõí Walmart Sales Data Analysis using SQL

## üìå Project Overview
This project focuses on analyzing **Walmart sales data** using **SQL queries** to answer key **business questions**.  
The dataset contains transaction-level details such as branch, city, product category, payment method, customer rating, quantity, and sales amount.  

By running SQL queries, I derived insights related to customer behavior, product performance, branch efficiency, and profitability.  

---

## üéØ Objectives
- Explore Walmart sales data to uncover meaningful insights.  
- Solve real-world business questions using **SQL**.  
- Demonstrate skills in **data querying, aggregation, ranking, and window functions**.  

---

## üìÇ Dataset
- Table Name: **`walmart`**
- Key Columns:
  - `branch` ‚Äì Store branch  
  - `city` ‚Äì Store location  
  - `category` ‚Äì Product category  
  - `payment_method` ‚Äì Payment method used by customer  
  - `quantity` ‚Äì Number of items purchased  
  - `rating` ‚Äì Customer satisfaction rating  
  - `total` ‚Äì Total transaction value  
  - `profit_margin` ‚Äì Profit margin percentage  
  - `date` ‚Äì Transaction date  
  - `time` ‚Äì Transaction time  

---

## üõ†Ô∏è Tools & Technologies
- **SQL** (PostgreSQL / MySQL syntax)  
- **Data Analysis Concepts**: Aggregations, Window Functions, Ranking, Grouping  
- **GitHub** for project showcase  

---

## üí° Business Questions & SQL Script

```sql
-- Q1 Identify the different payment methods used by customers and
-- analyze the total quantity of items sold through each payment method.

SELECT 
    payment_method,
    COUNT(*) AS total_transaction,
    SUM(quantity) AS Units_sold
FROM walmart
GROUP BY payment_method;


-- Q2 Determine the highest-rated product category in each branch by
-- calculating the average customer rating.
-- Display the branch name, product category, and the corresponding average rating.

SELECT * FROM (
    SELECT branch, category,
           AVG(rating) AS avg_rating,
           RANK() OVER (PARTITION BY branch ORDER BY AVG(rating) DESC) AS rank
    FROM walmart
    GROUP BY branch, category
) WHERE rank = 1;


-- Q3 Identify the busiest day for each branch by determining
-- the day with the highest number of transactions. 
-- Display the branch, day of the week, and the total transaction count for that day.

SELECT * FROM (
    SELECT branch,
           TO_CHAR(TO_DATE(date,'dd/mm/yy'),'day') AS day_name,
           COUNT(*) AS no_of_transactions,
           RANK() OVER (PARTITION BY branch ORDER BY COUNT(*) DESC) AS rank
    FROM walmart 
    GROUP BY 1,2
) WHERE rank = 1;


-- Q4 Determine the average, minimum, and maximum customer ratings 
-- for each product category within every city.
-- Display the city, product category, and corresponding values.

SELECT city, category,
       AVG(rating) AS avg_rating,
       MAX(rating) AS max_rating,
       MIN(rating) AS min_rating
FROM walmart
GROUP BY city, category;


-- Q5 Calculate the total profit generated by each product category.
-- Display the product category along with the corresponding total profit.

SELECT category,
       SUM(total * profit_margin) AS total_profit
FROM walmart
GROUP BY category
ORDER BY total_profit;


-- Q6 Determine the most commonly used payment method in each branch by
-- identifying the payment method with the highest number of transactions.

WITH cte AS (
    SELECT branch,
           payment_method,
           COUNT(*) AS no_of_transaction,
           RANK() OVER (PARTITION BY branch ORDER BY COUNT(*) DESC) AS rank
    FROM walmart
    GROUP BY 1,2
)
SELECT * FROM cte WHERE rank = 1;


-- Q7 Classify sales transactions into Morning, Afternoon, and Evening
-- based on the time of purchase.
-- Then, determine the number of transactions within each category.

SELECT branch,
       CASE
            WHEN EXTRACT(HOUR FROM (time::time)) < 12 THEN 'Morning'
            WHEN EXTRACT(HOUR FROM (time::time)) BETWEEN 12 AND 17 THEN 'Afternoon'
            ELSE 'Evening'
       END AS day_time,
       COUNT(*) AS no_of_transactions
FROM walmart
GROUP BY 1,2
ORDER BY 1,3 DESC;


-- Q8 Identify the top 5 branches with the highest decline in revenue 
-- by comparing the current year (2023) to the previous year (2022).

WITH revenue_2022 AS (
    SELECT branch, SUM(total) AS revenue
    FROM walmart
    WHERE EXTRACT(YEAR FROM TO_DATE(date,'dd/mm/yy')) = 2022
    GROUP BY branch
),
revenue_2023 AS (
    SELECT branch, SUM(total) AS revenue
    FROM walmart
    WHERE EXTRACT(YEAR FROM TO_DATE(date,'dd/mm/yy')) = 2023
    GROUP BY branch
)
SELECT ls.branch,
       ls.revenue AS last_year_revenue,
       cs.revenue AS current_year_revenue,
       ROUND((ls.revenue - cs.revenue)::numeric * 100 / ls.revenue::numeric, 2) AS revenue_decline_percentage
FROM revenue_2022 AS ls
JOIN revenue_2023 AS cs ON ls.branch = cs.branch
WHERE ls.revenue > cs.revenue
ORDER BY revenue_decline_percentage DESC
LIMIT 5;
